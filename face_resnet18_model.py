# -*- coding: utf-8 -*-
"""face_resnet18_fallback.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EHEwR3nMoIuOjRsv-tD1d_g7zOX-hlGR
"""

import os
import numpy as np
from tqdm import tqdm

# Folder containing subdirectories for each person
KNOWN_DIR = "/home/krs2025intern4/output"

# Choose model
MODEL_NAME = "ResNet18"

# Dictionary to store average embeddings per person
arcface_database = {}

print(f"Building database using {MODEL_NAME} model from {KNOWN_DIR}")

# Loop through each person's subdirectory
for person_name_dir in tqdm(os.listdir(KNOWN_DIR), desc="Processing individuals"):
    person_dir_path = os.path.join(KNOWN_DIR, person_name_dir)

    # Skip if it's not a directory
    if not os.path.isdir(person_dir_path):
        continue

    embeddings = []
    # Loop through image files in the person's directory
    for img_name in os.listdir(person_dir_path):
        img_path = os.path.join(person_dir_path, img_name)

        # Skip if it's not a file or not an image (basic check)
        if not os.path.isfile(img_path) or not img_name.lower().endswith(('.png', '.jpg', '.jpeg')):
            continue

        try:
            # Get embedding for the image
            # enforce_detection=False is used because faces are already cropped

            # Since we expect cropped faces, we take the first result.
            if face_representation and len(face_representation) > 0:
                 embeddings.append(face_representation[0]['embedding'])
            else:
                # or if there's an issue with the image file itself.
                print(f"⚠️ Could not get representation for {img_path}")

        except Exception as e:
            # Catch potential errors during processing a specific image
            print(f"❌ Error processing {img_path} for embedding: {e}")

    # Calculate the average embedding for the person if any embeddings were successfully generated
    if embeddings:
        arcface_database[person_name_dir] = np.mean(np.array(embeddings), axis=0)
        # print(f"✅ Added {person_name_dir} to database with {len(embeddings)} embeddings.") # Too verbose
    # else:
        # print(f"⚠️ No valid embeddings found for {person_name_dir}. Skipping.") # Too verbose


print("\n✅ Embedding database ready.")
print(f"Database contains embeddings for {len(arcface_database)} individuals.")